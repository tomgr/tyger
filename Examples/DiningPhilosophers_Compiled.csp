include "CSP.csp"

UserEvents = {|pickup', putdown', sitdown', eat', getup'|}

datatype ProcArgs = Proc_Philosopher'.ID'| Proc_Fork'.ID'

GetProc(Proc_Philosopher'.arg_1') = Philosopher_UNWRAPPED'(arg_1')
GetProc(Proc_Fork'.arg_1') = Fork_UNWRAPPED'(arg_1')

N' = 5

ID' = {0..N' - 1}

channel pickup', putdown' : ID'. ID'

channel sitdown', eat', getup' : ID'

mplus'(x', y') = (x' + y') % N'

Philosopher_UNWRAPPED'(id') =
    Prefix'(sitdown'.id',
            Prefix'(pickup'.id'.id',
                    Prefix'(pickup'.id'.mplus'(id', 1),
                            Prefix'(eat'.id',
                                    Prefix'(putdown'.id'.mplus'(id', 1),
                                            Prefix'(putdown'.id'.id',
                                                    Prefix'(getup'.id',
                                                            CallProc(Proc_Philosopher'.id'))))))))

Philosopher'(arg_1') = WrapThread(Proc_Philosopher'.arg_1')

Fork_UNWRAPPED'(i') =
    ExternalChoice'(Prefix'(pickup'.i'.i',
                            Prefix'(putdown'.i'.i', CallProc(Proc_Fork'.i'))),
                    Prefix'(pickup'.(i' - 1) % N'.i',
                            Prefix'(putdown'.(i' - 1) % N'.i', CallProc(Proc_Fork'.i'))))

Fork'(arg_1') = WrapThread(Proc_Fork'.arg_1')

AlphaFork'(id') =
    {pickup'.id'.id', putdown'.id'.id', pickup'.(id' - 1) % N'.id',
     putdown'.(id' - 1) % N'.id'}

System' =
    Parallel'(ReplicatedInterleave'(<Philosopher'(id') | id'
                                                         <- seq(ID')>),
              ReplicatedAlphaParallel'(<Fork'(id') | id' <- seq(ID')>,
                                       <AlphaFork'(id') | id' <- seq(ID')>),
              {|putdown', pickup'|})